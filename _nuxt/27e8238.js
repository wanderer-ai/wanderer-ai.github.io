(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{171:function(e,t,n){var content=n(188);"string"==typeof content&&(content=[[e.i,content,""]]),content.locals&&(e.exports=content.locals);(0,n(48).default)("7f41fa4b",content,!0,{sourceMap:!1})},187:function(e,t,n){"use strict";n(171)},188:function(e,t,n){(t=n(47)(!1)).push([e.i,"",""]),e.exports=t},202:function(e,t,n){"use strict";n.r(t);var o=n(160),r=n(159),l=n(161),c={components:{AppNav:r.a,AppFooter:l.a,HeaderSection:o.a}},h=(n(187),n(22)),component=Object(h.a)(c,(function(){var e=this.$createElement,t=this._self._c||e;return t("div",[t("app-nav"),this._v(" "),t("header-section",{attrs:{colorFrom:"blue",colorTo:"blue-dark"}},[t("h1",{staticClass:"uppercase text-6xl text-white mb-4"},[this._v("Story")])]),this._v(" "),this._m(0),this._v(" "),t("app-footer",{attrs:{colorFrom:"blue",colorTo:"blue-dark"}})],1)}),[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"container narrow content py-24"},[n("p",[e._v("\n      Hey! My name is Chris. I am developer, coder and enthusiastic web freelancer from Germany.\n      I am also the maintainer and developer of Wanderer.ai.\n    ")]),e._v(" "),n("h2",{attrs:{id:"technology"}},[e._v("The beginning")]),e._v(" "),n("p",[e._v("\n      A while ago me and a friend of mine where spending much time in a software as a service project.\n      The goal was to help and support people writing unique and beautiful blog articles.\n      The core of the product was a chatbot that should guide people through the process and give tips while writing.\n    ")]),e._v(" "),n("p",[e._v("\n      But at this time it was not possible for us to find a chatbot solution or service platform that fits our needs.\n      Complex flow editors, cumbersome self programming, intransparent pricing models and imposed brandings were only a few stones on our way.\n      But the biggest problem was, that it was just not possible to react to the complex context of the conversation in an easy and elegant way\n      without heavily increasing the complexity of the chatbot flow and our program code.\n    ")]),e._v(" "),n("p",[e._v("\n      I also realized that we were packing very specific expert knowledge in a bulky format and bury it forever on servers and inside platforms.\n      Besides, it did not seem to make sense for the conversation sending every request to serveral APIs and servers.\n    ")]),e._v(" "),n("h2",{attrs:{id:"technology"}},[e._v("Technology")]),e._v(" "),n("p",[e._v("\n      Unfortunately we had to give up the project because it was too complex to map our conversational flow in our expert system. But the idea of the chatbot itself remained.\n      I asked myself if there is an easy and elegant way of storing and maintaining complex contexts and its reactions.\n      Then I remembered a technology I researched a few years ago. At this time I was playing with graph databases and traversal algorithms.\n      I suddenly had the idea of storing conversational structures inside a graph model. Suprisingly this was very easy and I recognized, that a graph can do even more.\n      It cannot only store data, it can also contain simple logical structures at graph level, which are normaly depicted with a programming language.\n      I called this structure a "),n("strong",[e._v("logic graph")]),e._v(". Then I discovered, that a logic graph can be executed by following the rules of a simple traversal algorithm.\n      At this moment I was able to simply ask the graph structure: “What is the next logic action based on your expert knowledge and my previous conversation?”\n      And the graph will answer immediatley. I called this technology "),n("strong",[e._v("logic graph traversal")]),e._v(".\n    ")]),e._v(" "),n("p",[e._v("\n      A logic graph has the possibility to drive very complex context dependent applications like Wanderer.ai.\n    ")])])}],!1,null,null,null);t.default=component.exports}}]);